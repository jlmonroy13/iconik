---
description: Enforces the use of react-hook-form combined with zod for all form implementations. Prevents uncontrolled form handling, requires schema-based validation, and ensures type safety and consistency across the codebase.
globs: ["**/*.tsx", "**/*.ts"]
alwaysApply: true
---

# React Hook Form with Zod Enforcement

## Form Implementation Requirements

### Mandatory Use of react-hook-form + zod
- All forms must use `useForm` from `react-hook-form`
- All validation must be defined using `zod` schemas
- All forms must use `zodResolver` for schema integration
- No manual form state management with `useState` for form inputs

```typescript
// ❌ FORBIDDEN - Manual form state management
const [email, setEmail] = useState('');
const [password, setPassword] = useState('');
const [errors, setErrors] = useState<Record<string, string>>({});

const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  // Manual validation logic
  if (!email) setErrors(prev => ({ ...prev, email: 'Email is required' }));
  if (!password) setErrors(prev => ({ ...prev, password: 'Password is required' }));
};

// ❌ FORBIDDEN - No schema-based validation
const { register, handleSubmit, formState: { errors } } = useForm();

// ✅ GOOD - Proper react-hook-form + zod implementation
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const loginSchema = z.object({
  email: z.string().email('Invalid email format'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
});

type LoginFormData = z.infer<typeof loginSchema>;

const LoginForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = (data: LoginFormData) => {
    // Handle form submission with typed data
    console.log(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register('email')} />
      {errors.email && <span>{errors.email.message}</span>}
      
      <input type="password" {...register('password')} />
      {errors.password && <span>{errors.password.message}</span>}
      
      <button type="submit" disabled={isSubmitting}>
        Login
      </button>
    </form>
  );
};
```

## Schema Definition Standards

### Zod Schema Requirements
- Define schemas using `zod` with proper validation rules
- Use descriptive error messages
- Export schemas for reusability
- Use `z.infer<>` for type inference

```typescript
// ✅ GOOD - Comprehensive schema definition
import { z } from 'zod';

export const userSchema = z.object({
  firstName: z.string()
    .min(2, 'First name must be at least 2 characters')
    .max(50, 'First name must be less than 50 characters'),
  lastName: z.string()
    .min(2, 'Last name must be at least 2 characters')
    .max(50, 'Last name must be less than 50 characters'),
  email: z.string()
    .email('Please enter a valid email address')
    .min(1, 'Email is required'),
  phone: z.string()
    .regex(/^\+?[\d\s\-\(\)]+$/, 'Please enter a valid phone number')
    .optional(),
  role: z.enum(['admin', 'cashier', 'manager'], {
    errorMap: () => ({ message: 'Please select a valid role' })
  }),
  isActive: z.boolean().default(true),
});

export type UserFormData = z.infer<typeof userSchema>;

// ✅ GOOD - Nested schema for complex forms
export const productSchema = z.object({
  name: z.string().min(1, 'Product name is required'),
  price: z.number()
    .positive('Price must be positive')
    .min(0.01, 'Price must be at least $0.01'),
  category: z.string().min(1, 'Category is required'),
  ingredients: z.array(z.object({
    id: z.string(),
    quantity: z.number().positive('Quantity must be positive'),
    unit: z.string().min(1, 'Unit is required'),
  })).min(1, 'At least one ingredient is required'),
  isAvailable: z.boolean().default(true),
});
```

## Form Component Structure

### Required Form Setup
- Use `useForm` with proper generic typing
- Include `zodResolver` with schema
- Handle form submission with typed data
- Display validation errors properly

```typescript
// ✅ GOOD - Complete form component structure
import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const productSchema = z.object({
  name: z.string().min(1, 'Product name is required'),
  price: z.number().positive('Price must be positive'),
  category: z.string().min(1, 'Category is required'),
});

type ProductFormData = z.infer<typeof productSchema>;

interface ProductFormProps {
  onSubmit: (data: ProductFormData) => Promise<void>;
  initialData?: Partial<ProductFormData>;
}

export const ProductForm: React.FC<ProductFormProps> = ({ 
  onSubmit, 
  initialData 
}) => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<ProductFormData>({
    resolver: zodResolver(productSchema),
    defaultValues: initialData,
  });

  const handleFormSubmit = async (data: ProductFormData) => {
    try {
      await onSubmit(data);
      reset();
    } catch (error) {
      console.error('Form submission failed:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-4">
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700">
          Product Name
        </label>
        <input
          id="name"
          type="text"
          {...register('name')}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500"
        />
        {errors.name && (
          <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="price" className="block text-sm font-medium text-gray-700">
          Price
        </label>
        <input
          id="price"
          type="number"
          step="0.01"
          {...register('price', { valueAsNumber: true })}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500"
        />
        {errors.price && (
          <p className="mt-1 text-sm text-red-600">{errors.price.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="category" className="block text-sm font-medium text-gray-700">
          Category
        </label>
        <select
          id="category"
          {...register('category')}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500"
        >
          <option value="">Select a category</option>
          <option value="beverages">Beverages</option>
          <option value="food">Food</option>
          <option value="desserts">Desserts</option>
        </select>
        {errors.category && (
          <p className="mt-1 text-sm text-red-600">{errors.category.message}</p>
        )}
      </div>

      <button
        type="submit"
        disabled={isSubmitting}
        className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 disabled:opacity-50"
      >
        {isSubmitting ? 'Saving...' : 'Save Product'}
      </button>
    </form>
  );
};
```

## Custom Input Integration

### Using Controller and useController
- Use `Controller` for complex custom inputs
- Use `useController` for custom input components
- Ensure proper type safety with controlled components

```typescript
// ✅ GOOD - Using Controller for custom inputs
import { Controller } from 'react-hook-form';

const CustomSelect = ({ 
  control, 
  name, 
  label, 
  options, 
  error 
}: {
  control: Control<any>;
  name: string;
  label: string;
  options: { value: string; label: string }[];
  error?: FieldError;
}) => {
  return (
    <Controller
      name={name}
      control={control}
      render={({ field }) => (
        <div>
          <label className="block text-sm font-medium text-gray-700">
            {label}
          </label>
          <select
            {...field}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500"
          >
            <option value="">Select an option</option>
            {options.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
          {error && (
            <p className="mt-1 text-sm text-red-600">{error.message}</p>
          )}
        </div>
      )}
    />
  );
};

// ✅ GOOD - Using useController in custom components
import { useController } from 'react-hook-form';

interface CustomInputProps {
  name: string;
  control: Control<any>;
  label: string;
  type?: string;
}

const CustomInput: React.FC<CustomInputProps> = ({ 
  name, 
  control, 
  label, 
  type = 'text' 
}) => {
  const {
    field,
    fieldState: { error },
  } = useController({
    name,
    control,
  });

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700">
        {label}
      </label>
      <input
        {...field}
        type={type}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500"
      />
      {error && (
        <p className="mt-1 text-sm text-red-600">{error.message}</p>
      )}
    </div>
  );
};
```

## Form Validation Patterns

### Advanced Validation Techniques
- Use conditional validation with `zod`
- Implement async validation when needed
- Handle complex validation scenarios

```typescript
// ✅ GOOD - Conditional validation
const conditionalSchema = z.object({
  hasDiscount: z.boolean(),
  discountCode: z.string().optional(),
  discountAmount: z.number().optional(),
}).refine((data) => {
  if (data.hasDiscount) {
    return data.discountCode || data.discountAmount;
  }
  return true;
}, {
  message: "Discount code or amount is required when discount is enabled",
  path: ["discountCode"], // Show error on discountCode field
});

// ✅ GOOD - Async validation
const asyncSchema = z.object({
  email: z.string().email().refine(
    async (email) => {
      // Check if email is already taken
      const response = await fetch(`/api/check-email?email=${email}`);
      const { available } = await response.json();
      return available;
    },
    { message: "This email is already registered" }
  ),
});

// ✅ GOOD - Complex validation with multiple fields
const orderSchema = z.object({
  items: z.array(z.object({
    productId: z.string(),
    quantity: z.number().positive(),
    price: z.number().positive(),
  })).min(1, 'At least one item is required'),
  paymentMethod: z.enum(['cash', 'card', 'transfer']),
  cardNumber: z.string().optional(),
}).refine((data) => {
  if (data.paymentMethod === 'card') {
    return data.cardNumber && data.cardNumber.length >= 13;
  }
  return true;
}, {
  message: "Card number is required for card payments",
  path: ["cardNumber"],
});
```

## Exception Guidelines

### Trivial Form Exceptions
Only allow exceptions for truly trivial forms with clear justification:

```typescript
// ✅ ALLOWED - Trivial search form with justification
// Exception: Single search input - no complex validation needed
const SearchForm = () => {
  const [searchTerm, setSearchTerm] = useState('');

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    // Simple search logic
    onSearch(searchTerm);
  };

  return (
    <form onSubmit={handleSearch}>
      <input
        type="text"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        placeholder="Search products..."
      />
      <button type="submit">Search</button>
    </form>
  );
};

// ❌ NOT ALLOWED - Complex form without react-hook-form + zod
// This should use react-hook-form + zod even though it's simple
const UserForm = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [errors, setErrors] = useState({});

  // Manual validation and state management - NOT ALLOWED
};
```

## Code Review Checklist

### Form Implementation Review
When reviewing forms, ensure:

- [ ] Uses `useForm` from `react-hook-form`
- [ ] Has a `zod` schema defined
- [ ] Uses `zodResolver` for schema integration
- [ ] No manual `useState` for form inputs
- [ ] Proper error handling and display
- [ ] Uses `Controller` or `useController` for custom inputs
- [ ] Type safety with `z.infer<>`
- [ ] Clear exception justification for trivial forms
- [ ] Proper form submission handling
- [ ] Loading states during submission

### Benefits
Following these rules will:

1. **Type Safety**: Full TypeScript support with inferred types
2. **Consistency**: Uniform form handling across the codebase
3. **Validation**: Robust, schema-based validation
4. **Performance**: Optimized re-renders with react-hook-form
5. **Maintainability**: Centralized validation logic
6. **Developer Experience**: Better autocomplete and error detection
7. **Scalability**: Easy to extend and modify forms

### Common Patterns

```typescript
// ✅ GOOD - Reusable form hook
export const useProductForm = (initialData?: Partial<ProductFormData>) => {
  return useForm<ProductFormData>({
    resolver: zodResolver(productSchema),
    defaultValues: initialData,
  });
};

// ✅ GOOD - Form submission handler
export const useFormSubmission = <T>(
  onSubmit: (data: T) => Promise<void>,
  onSuccess?: () => void,
  onError?: (error: Error) => void
) => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (data: T) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
      onSuccess?.();
    } catch (error) {
      onError?.(error as Error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return { handleSubmit, isSubmitting };
};
```

