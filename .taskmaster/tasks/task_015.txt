# Task ID: 15
# Title: Develop Create Payment Method Form
# Status: pending
# Dependencies: 11, 13
# Priority: medium
# Description: Implement the form for creating new payment methods with validation.
# Details:
Create `create.tsx` in `payment-methods/`. Use React Hook Form + Zod for validation. Fields: Name, Type (dropdown), integration fields (if any). Submit to server action. Example:
```tsx
// src/app/dashboard/payment-methods/create.tsx
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { PaymentMethodSchema } from './schemas';
import { createPaymentMethod } from './actions';

export default function CreatePaymentMethod() {
  const form = useForm({ resolver: zodResolver(PaymentMethodSchema) });
  const onSubmit = async (data) => {
    await createPaymentMethod(data);
    // Redirect or show success
  };
  return (
    <form onSubmit={form.handleSubmit(onSubmit)}>
      {/* Fields: name, type, etc. */}
      <button type='submit'>Create</button>
    </form>
  );
}
```

# Test Strategy:
Test form validation, submission, and error handling. Verify RBAC and spaId context.

# Subtasks:
## 1. Implement Form UI [pending]
### Dependencies: None
### Description: Design and build the user interface for the form, ensuring clear labels, logical grouping, and accessibility. Follow best practices such as using a single-column layout, placing labels above fields, and minimizing the number of input fields.
### Details:
Use appropriate input types, group related fields, and provide clear instructions. Visually differentiate form fields from other UI elements and ensure the submit button clearly describes its action.[1][3][4]

## 2. Develop Validation Logic [pending]
### Dependencies: 15.1
### Description: Implement real-time (inline) validation for form fields to provide immediate feedback to users and prevent submission of incorrect data.
### Details:
Add inline validation that checks user input as they fill out each field, displaying helpful error messages and visual cues for valid or invalid entries. Ensure validation rules are clear and user-friendly.[2][4][5]

## 3. Handle Form Submission [pending]
### Dependencies: 15.2
### Description: Integrate form submission logic, including sending data to the server and providing clear feedback to the user upon success or failure.
### Details:
Ensure the form only submits when all validations pass. Display confirmation messages on successful submission and clear, actionable error messages if submission fails. Consider using autofill and predictive text to streamline the process.[2][4]

