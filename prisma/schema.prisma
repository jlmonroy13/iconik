// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// ICONIK - SaaS para Gestión de Spas de Uñas
// Multi-tenant architecture with spaId filtering
// =====================================================

model Spa {
  id       String  @id @default(cuid())
  name     String
  slug     String  @unique
  address  String?
  phone    String?
  email    String?
  logoUrl  String?
  isActive Boolean @default(true)

  // Operating hours
  openingTime String? // Format: "09:00" - Spa opening time
  closingTime String? // Format: "18:00" - Spa closing time

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users                      User[]
  services                   Service[]
  manicurists                Manicurist[]
  clients                    Client[]
  appointments               Appointment[]
  paymentMethods             PaymentMethod[]
  payments                   Payment[]
  feedbacks                  Feedback[]
  commissions                Commission[]
  expenses                   Expense[]
  expensePayments            ExpensePayment[]
  clientServiceHistory       ClientServiceHistory[]
  followUpNotifications      FollowUpNotification[]
  manicuristSchedules        ManicuristSchedule[]
  manicuristAvailability     ManicuristAvailability[]
  bookingLinks               BookingLink[]
  timeSlots                  TimeSlot[]
  manicuristServiceDurations ManicuristServiceDuration[]
  salesGoals                 SalesGoal[]
  salesGoalProgress          SalesGoalProgress[]
  appointmentApprovalHistory AppointmentApprovalHistory[]
  preConfirmationReminders   PreConfirmationReminder[]
  cashRegisters              CashRegister[]
  cashRegisterShifts         CashRegisterShift[]
  cashRegisterTransactions   CashRegisterTransaction[]
  bookingLinkServices        BookingLinkService[]
  spaSchedules               SpaSchedule[]
  dianSettings               SpaDianSettings?
  invoices                   Invoice[]
  invoiceItems               InvoiceItem[]
  invoicePayments            InvoicePayment[]
  dianLogs                   DianLog[]
  branches                   Branch[]
  corporateSettings          SpaCorporateSettings?

  @@map("spas")
}

model SpaSchedule {
  id          String        @id @default(cuid())
  dayOfWeek   Int?          // 0 = Sunday, 1 = Monday, ..., 6 = Saturday, null = holiday
  isHoliday   Boolean       @default(false)
  isActive    Boolean       @default(true)

  // Schedule details
  startTime   String        // Format: "08:30"
  endTime     String        // Format: "19:00"
  isOpen      Boolean       @default(true) // false = closed day

  // Optional: specific date for holidays
  specificDate DateTime?    // For specific holiday dates

  // Optional: description
  description String?       // "Festivos", "Domingos no laboramos", etc.

  spaId       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  spa         Spa           @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@unique([spaId, dayOfWeek, isHoliday])
  @@map("spa_schedules")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String? // Hashed password for Auth.js (optional for magic link/OAuth)
  role      UserRole @default(CLIENT)
  spaId     String? // Spa association is optional for super admin
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isSuperAdmin Boolean @default(false) // Marks if the user is a super admin

  // Auth.js fields
  emailVerified DateTime?
  image         String?

  // Auth.js relations
  accounts      Account[]
  sessions      Session[]
  Authenticators Authenticator[]

  // App relations
  spa                        Spa?                          @relation(fields: [spaId], references: [id], onDelete: Cascade)
  approvedAppointments       Appointment[]                @relation("AppointmentApprover")
  preConfirmedAppointments   Appointment[]                @relation("AppointmentPreConfirmer")
  appointmentApprovalHistory AppointmentApprovalHistory[]
  cashRegisterShiftsOpened   CashRegisterShift[]          @relation("CashRegisterOpener")
  cashRegisterShiftsClosed   CashRegisterShift[]          @relation("CashRegisterCloser")
  cashRegisterTransactions   CashRegisterTransaction[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Client {
  id        String    @id @default(cuid())
  name      String
  documentType   String // Ej: 'CC', 'TI', 'CE', 'PA', 'NIT'
  documentNumber String
  phone     String?
  email     String?
  birthday  DateTime?
  notes     String?
  spaId     String
  branchId  String?   // Sede donde se registró el cliente (opcional para clientes corporativos)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  spa                  Spa                    @relation(fields: [spaId], references: [id], onDelete: Cascade)
  branch               Branch?                @relation(fields: [branchId], references: [id], onDelete: SetNull)
  appointments         Appointment[]
  clientServiceHistory ClientServiceHistory[]
  invoices             Invoice[]

  @@map("clients")
}

model ClientServiceHistory {
  id                    String    @id @default(cuid())
  clientId              String
  serviceId             String
  appointmentServiceId  String
  serviceDate           DateTime // When the service was performed
  recommendedReturnDate DateTime // When client should return (calculated from service.recommendedReturnDays)
  isNotified            Boolean   @default(false) // Whether admin has been notified about follow-up
  notifiedAt            DateTime? // When admin was notified
  isFollowedUp          Boolean   @default(false) // Whether admin has contacted the client
  followedUpAt          DateTime? // When admin contacted the client
  notes                 String? // Admin notes about follow-up
  spaId                 String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  client                Client                 @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service               Service                @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointmentService    AppointmentService     @relation(fields: [appointmentServiceId], references: [id], onDelete: Cascade)
  spa                   Spa                    @relation(fields: [spaId], references: [id], onDelete: Cascade)
  followUpNotifications FollowUpNotification[]

  @@map("client_service_history")
}

model FollowUpNotification {
  id                     String                     @id @default(cuid())
  clientServiceHistoryId String
  type                   FollowUpNotificationType
  status                 FollowUpNotificationStatus @default(PENDING)
  scheduledFor           DateTime // When the notification should be sent
  sentAt                 DateTime? // When the notification was actually sent
  message                String? // Custom message for the notification
  spaId                  String
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt

  // Relations
  clientServiceHistory ClientServiceHistory @relation(fields: [clientServiceHistoryId], references: [id], onDelete: Cascade)
  spa                  Spa                  @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("follow_up_notifications")
}

model Manicurist {
  id         String   @id @default(cuid())
  name       String
  phone      String?
  email      String?
  commission Float    @default(0.5) // Commission percentage (0.0 to 1.0)
  isActive   Boolean  @default(true)
  spaId      String
  branchId   String?  // Sede principal de la manicurista (opcional para manicuristas multi-sede)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  spa                 Spa                         @relation(fields: [spaId], references: [id], onDelete: Cascade)
  branch              Branch?                     @relation(fields: [branchId], references: [id], onDelete: SetNull)
  appointments        Appointment[]
  appointmentServices AppointmentService[]
  commissions         Commission[]
  schedules           ManicuristSchedule[]
  availability        ManicuristAvailability[]
  timeSlots           TimeSlot[]
  serviceDurations    ManicuristServiceDuration[]
  salesGoals          SalesGoal[]

  @@map("manicurists")
}

model ManicuristSchedule {
  id           String   @id @default(cuid())
  manicuristId String
  dayOfWeek    Int // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime    String // Format: "09:00"
  endTime      String // Format: "17:00"
  isActive     Boolean  @default(true)
  spaId        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  manicurist Manicurist @relation(fields: [manicuristId], references: [id], onDelete: Cascade)
  spa        Spa        @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@unique([manicuristId, dayOfWeek])
  @@map("manicurist_schedules")
}

model ManicuristAvailability {
  id           String   @id @default(cuid())
  manicuristId String
  date         DateTime // Specific date
  startTime    String? // Format: "09:00" - If null, uses regular schedule
  endTime      String? // Format: "17:00" - If null, uses regular schedule
  isAvailable  Boolean  @default(true) // false = day off, true = available
  reason       String? // Reason for unavailability (vacation, sick, etc.)
  spaId        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  manicurist Manicurist @relation(fields: [manicuristId], references: [id], onDelete: Cascade)
  spa        Spa        @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@unique([manicuristId, date])
  @@map("manicurist_availability")
}

model BookingLink {
  id       String  @id @default(cuid())
  token    String  @unique // Unique token for the booking URL
  name     String // Name/description of the booking link
  isActive Boolean @default(true)

  // Booking window
  validFrom  DateTime // When bookings can start
  validUntil DateTime // When bookings can no longer be made

  // Advanced settings
  maxAdvanceDays          Int? // Maximum days in advance to book (null = unlimited)
  minAdvanceHours         Int? // Minimum hours in advance to book (default: 2)
  allowSameDayBooking     Boolean @default(false) // Allow booking for same day
  requiresApproval        Boolean @default(true) // Whether appointments need admin approval
  requiresPreConfirmation Boolean @default(true) // Whether admin needs to confirm before appointment
  preConfirmationHours    Int     @default(24) // Hours before appointment when admin should confirm

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa          Spa                  @relation(fields: [spaId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  services     BookingLinkService[]

  @@map("booking_links")
}

model BookingLinkService {
  id            String  @id @default(cuid())
  bookingLinkId String
  serviceId     String
  isActive      Boolean @default(true)

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookingLink BookingLink @relation(fields: [bookingLinkId], references: [id], onDelete: Cascade)
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  spa         Spa         @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@unique([bookingLinkId, serviceId])
  @@map("booking_link_services")
}

model TimeSlot {
  id          String   @id @default(cuid())
  date        DateTime // Date of the time slot
  startTime   String // Format: "09:00"
  endTime     String // Format: "10:00"
  duration    Int // Duration in minutes
  isAvailable Boolean  @default(true)
  isBooked    Boolean  @default(false)

  // Optional: specific manicurist for this slot
  manicuristId String?

  // Optional: appointment that occupies this slot
  appointmentId String?

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  manicurist  Manicurist?  @relation(fields: [manicuristId], references: [id], onDelete: SetNull)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  spa         Spa          @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@unique([date, startTime, manicuristId])
  @@map("time_slots")
}

model ManicuristServiceDuration {
  id           String @id @default(cuid())
  manicuristId String
  serviceId    String

  // Duration statistics
  totalServices   Int   @default(0) // Total number of services performed
  totalDuration   Int   @default(0) // Total minutes spent
  averageDuration Float @default(0) // Average duration in minutes
  minDuration     Int? // Fastest time recorded
  maxDuration     Int? // Slowest time recorded

  // Last updated
  lastServiceDate DateTime?
  spaId           String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  manicurist Manicurist @relation(fields: [manicuristId], references: [id], onDelete: Cascade)
  service    Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  spa        Spa        @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@unique([manicuristId, serviceId])
  @@map("manicurist_service_durations")
}

model SalesGoal {
  id           String          @id @default(cuid())
  name         String // "Meta diaria enero", "Meta semanal manicuristas", etc.
  type         SalesGoalType
  period       SalesGoalPeriod
  targetAmount Float // Target amount in currency
  startDate    DateTime // When this goal starts
  endDate      DateTime? // When this goal ends (null = ongoing)
  isActive     Boolean         @default(true)

  // Optional: specific target for manicurist or service
  manicuristId String?
  serviceId    String?

  // Progress tracking
  currentAmount Float    @default(0) // Current progress
  lastUpdated   DateTime @default(now())

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  manicurist Manicurist?         @relation(fields: [manicuristId], references: [id], onDelete: SetNull)
  service    Service?            @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  spa        Spa                 @relation(fields: [spaId], references: [id], onDelete: Cascade)
  progress   SalesGoalProgress[]

  @@map("sales_goals")
}

model SalesGoalProgress {
  id          String   @id @default(cuid())
  salesGoalId String
  date        DateTime // Date of the progress entry

  // Progress for this specific date
  amount       Float @default(0) // Amount achieved on this date
  services     Int   @default(0) // Number of services on this date
  clients      Int   @default(0) // Number of clients on this date
  appointments Int   @default(0) // Number of appointments on this date

  // Calculated fields
  percentage Float @default(0) // Percentage of daily goal achieved

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  salesGoal SalesGoal @relation(fields: [salesGoalId], references: [id], onDelete: Cascade)
  spa       Spa       @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@unique([salesGoalId, date])
  @@map("sales_goal_progress")
}

model AppointmentApprovalHistory {
  id            String         @id @default(cuid())
  appointmentId String
  action        ApprovalAction // APPROVE, REJECT, REQUEST_CHANGES
  notes         String? // Admin notes about the action
  adminId       String // User ID who performed the action

  spaId     String
  createdAt DateTime @default(now())

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  admin       User        @relation(fields: [adminId], references: [id])
  spa         Spa         @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("appointment_approval_history")
}

model PreConfirmationReminder {
  id            String                        @id @default(cuid())
  appointmentId String
  scheduledFor  DateTime // When the reminder should be sent
  sentAt        DateTime? // When the reminder was actually sent
  type          PreConfirmationReminderType
  status        PreConfirmationReminderStatus @default(PENDING)
  message       String? // Custom message for the reminder

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  spa         Spa         @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("pre_confirmation_reminders")
}

model CashRegister {
  id             String  @id @default(cuid())
  name           String // "Caja Principal", "Caja Secundaria", etc.
  isActive       Boolean @default(true)
  currentBalance Float   @default(0) // Current cash balance

  spaId     String
  branchId  String?  // Sede donde se encuentra la caja
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa    Spa                 @relation(fields: [spaId], references: [id], onDelete: Cascade)
  branch Branch?             @relation(fields: [branchId], references: [id], onDelete: SetNull)
  shifts CashRegisterShift[]

  @@map("cash_registers")
}

model CashRegisterShift {
  id             String  @id @default(cuid())
  cashRegisterId String
  openedBy       String // User ID who opened the shift
  closedBy       String? // User ID who closed the shift

  // Shift timing
  openedAt DateTime  @default(now())
  closedAt DateTime? // When the shift was closed

  // Opening balance
  openingBalance Float @default(0) // Cash at start of shift

  // Closing balance
  closingBalance  Float? // Cash at end of shift
  expectedBalance Float? // Expected cash based on transactions
  difference      Float? // Difference between expected and actual

  // Shift status
  status CashRegisterShiftStatus @default(OPEN)
  notes  String? // Notes about the shift

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cashRegister CashRegister              @relation(fields: [cashRegisterId], references: [id], onDelete: Cascade)
  opener       User                      @relation("CashRegisterOpener", fields: [openedBy], references: [id])
  closer       User?                     @relation("CashRegisterCloser", fields: [closedBy], references: [id])
  spa          Spa                       @relation(fields: [spaId], references: [id], onDelete: Cascade)
  transactions CashRegisterTransaction[]

  @@map("cash_register_shifts")
}

model CashRegisterTransaction {
  id                  String  @id @default(cuid())
  cashRegisterShiftId String
  paymentId           String? @unique // If related to a payment (unique for one-to-one relation)

  // Transaction details
  type        CashRegisterTransactionType
  amount      Float // Amount of the transaction
  description String // Description of the transaction
  reference   String? // External reference

  // Cash flow
  cashIn  Float @default(0) // Cash received
  cashOut Float @default(0) // Cash given out

  // User tracking
  performedBy String // User ID who performed the transaction

  spaId     String
  createdAt DateTime @default(now())

  // Relations
  cashRegisterShift CashRegisterShift @relation(fields: [cashRegisterShiftId], references: [id], onDelete: Cascade)
  payment           Payment?          @relation(fields: [paymentId], references: [id])
  performer         User              @relation(fields: [performedBy], references: [id])
  spa               Spa               @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("cash_register_transactions")
}

model Service {
  id                    String      @id @default(cuid())
  type                  ServiceType // Type of service
  name                  String
  description           String?
  price                 Float // Base service price
  kitCost               Float? // Optional kit cost (goes directly to spa)
  taxRate               Float? // Optional tax rate (e.g., 0.19 for 19% VAT)
  duration              Int // Standard duration in minutes
  recommendedReturnDays Int? // Days recommended for client to return (e.g., 15 for traditional nails)
  imageUrl              String?
  isActive              Boolean     @default(true)
  spaId                 String
  branchId              String?     // Sede donde se ofrece el servicio (opcional para servicios multi-sede)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  spa                  Spa                         @relation(fields: [spaId], references: [id], onDelete: Cascade)
  branch               Branch?                     @relation(fields: [branchId], references: [id], onDelete: SetNull)
  appointmentServices  AppointmentService[]
  clientServiceHistory ClientServiceHistory[]
  serviceDurations     ManicuristServiceDuration[]
  salesGoals           SalesGoal[]
  bookingLinkServices  BookingLinkService[]
  invoiceItems         InvoiceItem[]
}

model Appointment {
  id            String            @id @default(cuid())
  clientId      String
  manicuristId  String?
  branchId      String?           // Sede donde se realiza la cita (opcional para compatibilidad)
  isScheduled   Boolean // true = scheduled, false = walk-in
  scheduledAt   DateTime
  status        AppointmentStatus @default(SCHEDULED)
  notes         String?
  bookingLinkId String? // If appointment was created via booking link

  // Approval fields
  requiresApproval Boolean   @default(false) // Whether this appointment needs admin approval
  approvedBy       String? // User ID who approved/rejected
  approvedAt       DateTime? // When it was approved/rejected
  approvalNotes    String? // Admin notes about approval/rejection

  // Pre-confirmation fields
  requiresPreConfirmation     Boolean   @default(false) // Whether admin needs to confirm before appointment
  preConfirmedBy              String? // User ID who pre-confirmed
  preConfirmedAt              DateTime? // When it was pre-confirmed
  preConfirmationNotes        String? // Admin notes about pre-confirmation
  preConfirmationReminderSent Boolean   @default(false) // Whether reminder was sent to admin

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa                      Spa                          @relation(fields: [spaId], references: [id], onDelete: Cascade)
  branch                   Branch?                      @relation(fields: [branchId], references: [id], onDelete: SetNull)
  client                   Client                       @relation(fields: [clientId], references: [id])
  manicurist               Manicurist?                  @relation(fields: [manicuristId], references: [id])
  services                 AppointmentService[]
  payments                 Payment[]
  bookingLink              BookingLink?                 @relation(fields: [bookingLinkId], references: [id])
  approver                 User?                        @relation("AppointmentApprover", fields: [approvedBy], references: [id])
  preConfirmer             User?                        @relation("AppointmentPreConfirmer", fields: [preConfirmedBy], references: [id])
  approvalHistory          AppointmentApprovalHistory[]
  preConfirmationReminders PreConfirmationReminder[]
  timeSlots                TimeSlot[]
}

model AppointmentService {
  id            String @id @default(cuid())
  appointmentId String
  serviceId     String
  manicuristId  String

  // Times by manicurist
  startedAtByManicurist DateTime?
  endedAtByManicurist   DateTime?

  // Times by admin
  startedAtByAdmin DateTime?
  endedAtByAdmin   DateTime?

  // Duration tracking
  estimatedDuration Int // minutes - from service.duration
  actualDuration    Int? // minutes - calculated from real start/end times
  durationAvg       Int? // minutes - historical average for this manicurist + service combination

  price     Float // Base service price
  kitCost   Float? // Optional kit cost (goes directly to spa)
  taxRate   Float? // Optional tax rate (e.g., 0.19 for 19% VAT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointment          Appointment            @relation(fields: [appointmentId], references: [id])
  service              Service                @relation(fields: [serviceId], references: [id])
  manicurist           Manicurist             @relation(fields: [manicuristId], references: [id])
  payments             Payment[]
  feedback             Feedback?
  clientServiceHistory ClientServiceHistory[]
}

model PaymentMethod {
  id             String   @id @default(cuid())
  name           String
  type           String? // 'Cash', 'Digital', 'Card', etc.
  isActive       Boolean  @default(true)
  icon           String? // (optional) for UI
  transactionFee Float    @default(0) // Transaction fee percentage (e.g., 0.035 for 3.5%)
  spaId          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  spa             Spa              @relation(fields: [spaId], references: [id], onDelete: Cascade)
  payments        Payment[]
  expensePayments ExpensePayment[]
}

model Payment {
  id                   String   @id @default(cuid())
  appointmentId        String?
  appointmentServiceId String?
  paymentMethodId      String
  branchId             String?  // Sede donde se realizó el pago
  amount               Float
  paidAt               DateTime @default(now())
  reference            String?

  // Discount fields
  originalAmount            Float // Original amount before discount
  discountAmount            Float   @default(0) // Amount of discount
  discountReason            String? // Reason for discount
  discountAffectsCommission Boolean @default(false) // If true, discount affects manicurist commission

  // Transaction fee fields
  transactionFeeAmount Float @default(0) // Amount of transaction fee
  transactionFeeRate   Float @default(0) // Transaction fee rate used

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa                     Spa                      @relation(fields: [spaId], references: [id], onDelete: Cascade)
  branch                  Branch?                  @relation(fields: [branchId], references: [id], onDelete: SetNull)
  appointment             Appointment?             @relation(fields: [appointmentId], references: [id])
  appointmentService      AppointmentService?      @relation(fields: [appointmentServiceId], references: [id])
  paymentMethod           PaymentMethod            @relation(fields: [paymentMethodId], references: [id])
  commission              Commission?
  cashRegisterTransaction CashRegisterTransaction?
  invoicePayments         InvoicePayment[]
}

model Commission {
  id               String           @id @default(cuid())
  paymentId        String           @unique
  manicuristId     String
  serviceAmount    Float // Original service amount before discount
  commissionRate   Float // Commission rate (e.g., 0.5 for 50%)
  commissionAmount Float // Final commission amount after discount
  spaAmount        Float // Final spa amount after discount
  status           CommissionStatus @default(PENDING)

  // Discount tracking
  originalCommissionAmount  Float // Commission amount before discount
  discountAmount            Float   @default(0) // Amount of discount applied to commission
  discountAffectsCommission Boolean @default(false) // Whether discount affects commission

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa        Spa        @relation(fields: [spaId], references: [id], onDelete: Cascade)
  payment    Payment    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  manicurist Manicurist @relation(fields: [manicuristId], references: [id])
}

model Feedback {
  id                   String   @id @default(cuid())
  appointmentServiceId String   @unique // One feedback per service
  token                String   @unique // Unique token for the feedback link
  tokenExpiresAt       DateTime // Token expiration time

  // Ratings
  serviceTimeRating         ServiceTimeRating // Muy rápido, Tiempo adecuado, Muy demorado
  workQualityRating         Int // 1-5 stars - Calidad del trabajo realizado
  manicuristAttentionRating Int // 1-5 stars - Atención de la manicurista
  spaAdminAttentionRating   Int // 1-5 stars - Atención del admin del spa

  // Optional comment
  comment String?

  // Status
  isSubmitted Boolean   @default(false)
  submittedAt DateTime?

  spaId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa                Spa                @relation(fields: [spaId], references: [id], onDelete: Cascade)
  appointmentService AppointmentService @relation(fields: [appointmentServiceId], references: [id])
}

model Expense {
  id          String           @id @default(cuid())
  name        String
  description String?
  amount      Float
  type        ExpenseType // FIXED, VARIABLE
  category    ExpenseCategory
  frequency   ExpenseFrequency // MONTHLY, WEEKLY, DAILY, ONE_TIME
  dueDate     DateTime? // For recurring expenses
  paidAt      DateTime? // When it was actually paid
  isPaid      Boolean          @default(false)
  isActive    Boolean          @default(true)
  spaId       String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  spa      Spa              @relation(fields: [spaId], references: [id], onDelete: Cascade)
  payments ExpensePayment[]
}

model ExpensePayment {
  id              String   @id @default(cuid())
  expenseId       String
  amount          Float
  paidAt          DateTime @default(now())
  paymentMethodId String
  reference       String?
  notes           String?
  spaId           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  expense       Expense       @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  spa           Spa           @relation(fields: [spaId], references: [id], onDelete: Cascade)
}

// =====================================================
// FACTURACIÓN DIAN-COMPLIANT PARA COLOMBIA
// =====================================================

model SpaDianSettings {
  id String @id @default(cuid())
  spaId String @unique

  // Información DIAN del Spa
  businessName        String // Razón social
  businessType        BusinessType // Tipo de persona: "JURIDICA" o "NATURAL"
  taxId               String // NIT sin DV
  taxIdDV             String @db.VarChar(1) // Dígito de verificación (1 carácter)
  taxRegime           TaxRegime // Régimen fiscal
  fiscalResponsibility FiscalResponsibility // Responsabilidad fiscal
  additionalFiscalResponsibility String? // Responsabilidades fiscales adicionales (texto libre)

  // Dirección fiscal
  addressLine1        String // Dirección línea 1
  addressLine2        String? // Dirección línea 2 (opcional)
  city                String // Ciudad
  state               String // Departamento
  countryCode         String @default("CO") // Código de país (ISO 3166-1 alpha-2)
  postalCode          String? // Código postal

  // Información de contacto fiscal
  phone               String? // Teléfono
  email               String? // Email

  // Configuración de facturación
  invoicePrefix       String @default("FAC") // Prefijo para numeración de facturas
  invoiceStartNumber  Int    @default(1) // Número inicial para facturas
  currentInvoiceNumber Int   @default(0) // Número actual de factura

  // Configuración DIAN
  dianTestMode        Boolean @default(true) // true = ambiente de pruebas, false = producción
  dianUsername        String? // Usuario DIAN
  dianPassword        String? // Contraseña DIAN (encriptada)
  dianCertificate     String? // Certificado digital (base64)
  dianCertificatePassword String? // Contraseña del certificado

  // Configuración de impuestos
  defaultTaxRate      Float @default(0.19) // IVA por defecto (19%)
  exemptTaxRate       Float @default(0.0) // Tasa para productos exentos

  // Configuración de descuentos
  allowDiscounts      Boolean @default(true) // Permitir descuentos en facturas
  maxDiscountPercent  Float @default(50.0) // Máximo descuento permitido (%)

  // Configuración de términos de pago
  defaultPaymentTerms String @default("CONTADO") // Términos de pago por defecto
  allowPartialPayments Boolean @default(true) // Permitir pagos parciales

  // Configuración de notas
  defaultNotes        String? // Notas por defecto en facturas
  footerText          String? // Texto del pie de página

  // Configuración de archivos
  logoUrl             String? // URL del logo para facturas
  signatureUrl        String? // URL de la firma digital

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa Spa @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("spa_dian_settings")
}

model Invoice {
  id String @id @default(cuid())

  // Información básica de la factura
  invoiceNumber      String @unique // Número de factura (ej: "FAC-001-00000001")
  invoiceType        InvoiceType @default(SALE) // Tipo de factura
  invoiceStatus      InvoiceStatus @default(DRAFT) // Estado de la factura

  // Fechas
  issueDate          DateTime @default(now()) // Fecha de emisión
  dueDate            DateTime? // Fecha de vencimiento
  sentAt             DateTime? // Fecha de envío al cliente
  paidAt             DateTime? // Fecha de pago

  // Información del cliente
  clientId           String? // Cliente (opcional para facturas sin cliente)
  clientName         String // Nombre del cliente
  clientTaxId        String? // NIT del cliente (sin DV)
  clientTaxIdDV      String? // DV del cliente
  clientAddress      String? // Dirección del cliente
  clientPhone        String? // Teléfono del cliente
  clientEmail        String? // Email del cliente

  // Información del Spa
  spaId              String
  branchId           String? // Sede donde se emitió la factura (opcional para facturas corporativas)
  spaName            String // Nombre del spa
  spaTaxId           String // NIT del spa
  spaAddress         String // Dirección del spa

  // Totales
  subtotal           Float // Subtotal sin impuestos
  taxAmount          Float @default(0) // Monto de impuestos
  discountAmount     Float @default(0) // Monto de descuentos
  totalAmount        Float // Monto total

  // Información de pago
  paymentTerms       String @default("CONTADO") // Términos de pago
  paymentMethod      String? // Método de pago
  paidAmount         Float @default(0) // Monto pagado
  balanceAmount      Float // Monto pendiente

  // Información DIAN
  dianStatus         DianStatus @default(PENDING) // Estado en DIAN
  dianResponse       String? // Respuesta de DIAN
  dianErrors         String? // Errores de DIAN
  dianCufe           String? // CUFE (Código Único de Factura Electrónica)
  dianQrCode         String? // Código QR de DIAN
  dianPdfUrl         String? // URL del PDF de DIAN

  // Archivos
  pdfUrl             String? // URL del PDF generado
  xmlUrl             String? // URL del XML generado

  // Notas y observaciones
  notes              String? // Notas internas
  publicNotes        String? // Notas visibles al cliente
  footerText         String? // Texto del pie de página

  // Información de auditoría
  createdBy          String // Usuario que creó la factura
  approvedBy         String? // Usuario que aprobó la factura
  approvedAt         DateTime? // Fecha de aprobación

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  spa                Spa                @relation(fields: [spaId], references: [id], onDelete: Cascade)
  branch             Branch?            @relation(fields: [branchId], references: [id], onDelete: SetNull)
  client             Client?            @relation(fields: [clientId], references: [id])
  items              InvoiceItem[]
  payments           InvoicePayment[]
  dianLogs           DianLog[]

  @@map("invoices")
}

model InvoiceItem {
  id String @id @default(cuid())
  invoiceId String

  // Información del servicio/producto
  serviceId          String? // Servicio relacionado (opcional)
  itemName           String // Nombre del item
  itemDescription    String? // Descripción del item
  itemCode           String? // Código del item

  // Cantidades y precios
  quantity           Float @default(1) // Cantidad
  unitPrice          Float // Precio unitario
  unitMeasure        String @default("UNIDAD") // Unidad de medida
  subtotal           Float // Subtotal (quantity * unitPrice) - Campo calculado

  // Impuestos
  taxRate            Float @default(0.19) // Tasa de impuesto
  taxAmount          Float @default(0) // Monto de impuesto - Campo calculado
  taxType            String @default("IVA") // Tipo de impuesto

  // Descuentos
  discountRate       Float @default(0) // Porcentaje de descuento
  discountAmount     Float @default(0) // Monto de descuento - Campo calculado

  // Total del item
  totalAmount        Float // Total del item (subtotal + tax - discount) - Campo calculado

  // Información adicional
  notes              String? // Notas del item

  spaId              String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  invoice            Invoice            @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service            Service?           @relation(fields: [serviceId], references: [id])
  spa                Spa                @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model InvoicePayment {
  id String @id @default(cuid())
  invoiceId String
  paymentId String? // Pago relacionado (opcional) - Conecta con el sistema de pagos de citas

  // Información del pago
  amount             Float // Monto del pago
  paymentMethod      String // Método de pago
  paymentDate        DateTime @default(now()) // Fecha del pago
  reference          String? // Referencia del pago

  // Información de la transacción
  transactionId      String? // ID de la transacción externa
  status             PaymentStatus @default(COMPLETED) // Estado del pago

  // Notas
  notes              String? // Notas del pago

  spaId              String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  invoice            Invoice            @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  payment            Payment?           @relation(fields: [paymentId], references: [id])
  spa                Spa                @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("invoice_payments")
}

model DianLog {
  id String @id @default(cuid())

  // Información de la operación
  operationType      String // Tipo de operación: "SEND_INVOICE", "GET_STATUS", etc.
  invoiceId          String? // Factura relacionada (opcional)

  // Información de la petición
  requestData        String // Datos de la petición (JSON)
  requestTimestamp   DateTime @default(now()) // Timestamp de la petición

  // Información de la respuesta
  responseData       String? // Datos de la respuesta (JSON)
  responseTimestamp  DateTime? // Timestamp de la respuesta
  responseStatus     String? // Status de la respuesta
  responseCode       String? // Código de respuesta DIAN

  // Información de errores
  errorMessage       String? // Mensaje de error
  errorCode          String? // Código de error
  errorDetails       String? // Detalles del error

  // Información del ambiente
  isTestMode         Boolean @default(true) // true = pruebas, false = producción

  spaId              String
  createdAt          DateTime @default(now())

  // Relations
  invoice            Invoice?           @relation(fields: [invoiceId], references: [id])
  spa                Spa                @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("dian_logs")
}

// =====================================================
// SISTEMA MULTI-SEDES
// =====================================================

model Branch {
  id          String   @id @default(cuid())
  name        String   // Nombre de la sede (ej: "Sede Centro", "Sede Norte")
  code        String   // Código único de la sede (ej: "CENTRO", "NORTE")
  description String?  // Descripción opcional

  // Información de contacto
  address     String   // Dirección de la sede
  phone       String?  // Teléfono de la sede
  email       String?  // Email de la sede

  // Configuración de horarios
  openingTime String?  // Hora de apertura (ej: "09:00")
  closingTime String?  // Hora de cierre (ej: "18:00")

  // Estado de la sede
  isActive    Boolean  @default(true)
  isMain      Boolean  @default(false) // true = sede principal

  // Configuración de facturación
  invoicePrefix String? // Prefijo específico para facturas de esta sede

  spaId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  spa         Spa              @relation(fields: [spaId], references: [id], onDelete: Cascade)
  settings    BranchSettings?
  appointments Appointment[]
  services    Service[]
  manicurists Manicurist[]
  clients     Client[]
  payments    Payment[]
  invoices    Invoice[]
  cashRegisters CashRegister[]

  @@unique([spaId, code])
  @@map("branches")
}

model SpaCorporateSettings {
  id String @id @default(cuid())
  spaId String @unique

  // Configuración de clientes corporativos
  enableCorporateClients Boolean @default(true) // Habilitar clientes corporativos
  allowCrossBranchAppointments Boolean @default(true) // Permitir citas entre sedes
  requireBranchSelection Boolean @default(true) // Requerir selección de sede

  // Configuración de facturación corporativa
  corporateInvoicePrefix String @default("FAC-CORP") // Prefijo para facturas corporativas
  enableConsolidatedInvoicing Boolean @default(false) // Facturación consolidada

  // Configuración de reportes
  enableCrossBranchReports Boolean @default(true) // Reportes entre sedes
  enableBranchComparison Boolean @default(true) // Comparación entre sedes

  // Configuración de permisos
  allowBranchSpecificSettings Boolean @default(true) // Configuraciones específicas por sede

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spa Spa @relation(fields: [spaId], references: [id], onDelete: Cascade)

  @@map("spa_corporate_settings")
}

model BranchSettings {
  id String @id @default(cuid())
  branchId String @unique

  // Configuración específica de la sede
  customInvoicePrefix String? // Prefijo personalizado para facturas
  customTaxRate Float? // Tasa de impuesto específica de la sede
  customOperatingHours Boolean @default(false) // Usar horarios personalizados

  // Configuración de servicios
  enableAllServices Boolean @default(true) // Habilitar todos los servicios del spa
  restrictedServices String[] // IDs de servicios restringidos en esta sede

  // Configuración de manicuristas
  enableAllManicurists Boolean @default(true) // Habilitar todas las manicuristas del spa
  restrictedManicurists String[] // IDs de manicuristas restringidas en esta sede

  // Configuración de clientes
  allowNewClients Boolean @default(true) // Permitir nuevos clientes en esta sede
  allowWalkIns Boolean @default(true) // Permitir clientes sin cita

  // Configuración de pagos
  allowedPaymentMethods String[] // Métodos de pago permitidos en esta sede

  // Configuración de facturación
  useSpaDianSettings Boolean @default(true) // Usar configuración DIAN del spa principal
  customDianSettings String? // Configuración DIAN personalizada (JSON)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@map("branch_settings")
}

// =====================================================
// ENUMS
// =====================================================

enum UserRole {
  SUPER_ADMIN // System super administrator
  ADMIN // Spa owner/administrator
  MANICURIST // Nail technician
  CLIENT // Regular customer
}

enum ServiceType {
  MANICURE
  PEDICURE
  NAIL_ART
  GEL_POLISH
  ACRYLIC_NAILS
  NAIL_REPAIR
  HAND_SPA
  FOOT_SPA
  OTHER
}

enum AppointmentStatus {
  PENDING_APPROVAL // Pending admin approval (for booking link appointments)
  SCHEDULED // Scheduled and confirmed
  IN_PROGRESS // In progress
  COMPLETED // Completed
  CANCELLED // Cancelled
  NO_SHOW // No show
}

enum ServiceTimeRating {
  VERY_FAST // ⏱️ Muy rápido
  ADEQUATE // ✅ Tiempo adecuado
  VERY_SLOW // 🕒 Muy demorado
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}

enum ExpenseType {
  FIXED
  VARIABLE
}

enum ExpenseCategory {
  RENT // Arriendo
  SALARIES // Sueldos
  MARKETING // Marketing y publicidad
  SUPPLIES // Suministros
  UTILITIES // Servicios públicos
  INSURANCE // Seguros
  MAINTENANCE // Mantenimiento
  EQUIPMENT // Equipos
  SOFTWARE // Software y tecnología
  PROFESSIONAL // Servicios profesionales
  TRAINING // Capacitación
  TRAVEL // Viajes
  FOOD // Alimentación
  CLEANING // Limpieza
  SECURITY // Seguridad
  OTHER // Otros
}

enum ExpenseFrequency {
  MONTHLY
  WEEKLY
  DAILY
  ONE_TIME
}

enum FollowUpNotificationType {
  EMAIL
  SMS
  PUSH
  DASHBOARD // In-app notification for admin
}

enum FollowUpNotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum SalesGoalType {
  REVENUE // Meta de ingresos totales
  SERVICES // Meta de número de servicios
  CLIENTS // Meta de número de clientes nuevos
  APPOINTMENTS // Meta de número de citas
}

enum SalesGoalPeriod {
  DAILY // Meta diaria
  WEEKLY // Meta semanal
  MONTHLY // Meta mensual
  QUARTERLY // Meta trimestral
  YEARLY // Meta anual
}

enum ApprovalAction {
  APPROVE // Approve the appointment
  REJECT // Reject the appointment
  REQUEST_CHANGES // Request changes to the appointment
}

enum PreConfirmationReminderType {
  EMAIL
  SMS
  PUSH
  DASHBOARD // In-app notification for admin
}

enum PreConfirmationReminderStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum CashRegisterShiftStatus {
  OPEN // Shift is currently open
  CLOSED // Shift has been closed
  SUSPENDED // Shift is temporarily suspended
}

enum CashRegisterTransactionType {
  PAYMENT_RECEIVED // Cash payment received from client
  PAYMENT_REFUND // Cash refund given to client
  CASH_DEPOSIT // Cash deposited to bank
  CASH_WITHDRAWAL // Cash withdrawn from bank
  EXPENSE_PAYMENT // Cash used to pay expense
  CHANGE_GIVEN // Change given to client
  OPENING_BALANCE // Initial cash when opening shift
  CLOSING_BALANCE // Final cash when closing shift
  ADJUSTMENT // Manual adjustment/correction
  OTHER // Other cash transaction
}

enum InvoiceType {
  SALE
  RETURN
  ADJUSTMENT
  CREDIT_NOTE
  DEBIT_NOTE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
  VOIDED
}

enum DianStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  VOIDED
}

enum PaymentStatus {
  COMPLETED
  FAILED
  PENDING
  REFUNDED
  PARTIALLY_REFUNDED
}

enum BusinessType {
  JURIDICA
  NATURAL
}

enum TaxRegime {
  SIMPLIFICADO
  COMUN
  GRAN_CONTRIBUYENTE
}

enum FiscalResponsibility {
  O_13 // O-13: Gran Contribuyente
  O_15 // O-15: Autorretenedor
  O_23 // O-23: Agente de Retención IVA
  O_47 // O-47: Régimen Simple de Tributación
  O_48 // O-48: Responsable de IVA
  O_49 // O-49: No Responsable de IVA
  O_50 // O-50: Responsable de IVA por Factura
  // Nota: Para responsabilidades adicionales específicas, usar campo de texto libre
}
