const { PrismaClient } = require("../src/generated/prisma");

const prisma = new PrismaClient();

async function testPrismaConnection() {
  try {
    console.log("üîå Testing Prisma connection...");

    // Test basic connection
    await prisma.$connect();
    console.log("‚úÖ Prisma connected successfully");

    // Test a simple query
    const spaCount = await prisma.spa.count();
    console.log(`‚úÖ Database accessible - Found ${spaCount} spas`);

    // Test all models are accessible
    console.log("\nüß™ Testing all models...");

    await prisma.spa.findFirst();
    console.log("‚úÖ Spa model");

    await prisma.service.findFirst();
    console.log("‚úÖ Service model");

    await prisma.manicurist.findFirst();
    console.log("‚úÖ Manicurist model");

    await prisma.client.findFirst();
    console.log("‚úÖ Client model");

    await prisma.appointment.findFirst();
    console.log("‚úÖ Appointment model");

    await prisma.bookingLink.findFirst();
    console.log("‚úÖ BookingLink model");

    await prisma.cashRegister.findFirst();
    console.log("‚úÖ CashRegister model");

    await prisma.salesGoal.findFirst();
    console.log("‚úÖ SalesGoal model");

    await prisma.clientServiceHistory.findFirst();
    console.log("‚úÖ ClientServiceHistory model");

    await prisma.manicuristSchedule.findFirst();
    console.log("‚úÖ ManicuristSchedule model");

    await prisma.manicuristAvailability.findFirst();
    console.log("‚úÖ ManicuristAvailability model");

    await prisma.timeSlot.findFirst();
    console.log("‚úÖ TimeSlot model");

    await prisma.manicuristServiceDuration.findFirst();
    console.log("‚úÖ ManicuristServiceDuration model");

    await prisma.salesGoalProgress.findFirst();
    console.log("‚úÖ SalesGoalProgress model");

    await prisma.appointmentApprovalHistory.findFirst();
    console.log("‚úÖ AppointmentApprovalHistory model");

    await prisma.preConfirmationReminder.findFirst();
    console.log("‚úÖ PreConfirmationReminder model");

    await prisma.cashRegisterShift.findFirst();
    console.log("‚úÖ CashRegisterShift model");

    await prisma.cashRegisterTransaction.findFirst();
    console.log("‚úÖ CashRegisterTransaction model");

    await prisma.bookingLinkService.findFirst();
    console.log("‚úÖ BookingLinkService model");

    console.log("\nüéâ All models are working correctly!");
    console.log(
      "‚úÖ Migration and Prisma client generation completed successfully!"
    );
  } catch (error) {
    console.error("‚ùå Error testing Prisma:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

testPrismaConnection();
